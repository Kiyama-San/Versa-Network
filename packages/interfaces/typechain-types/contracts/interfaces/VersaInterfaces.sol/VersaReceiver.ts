/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace VersaInterfaces {
  export type VersaMessageStruct = {
    VersaTxSenderAddress: BytesLike;
    sourceChainId: BigNumberish;
    destinationAddress: string;
    VersaValue: BigNumberish;
    message: BytesLike;
  };

  export type VersaMessageStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    VersaTxSenderAddress: string;
    sourceChainId: BigNumber;
    destinationAddress: string;
    VersaValue: BigNumber;
    message: string;
  };

  export type VersaRevertStruct = {
    VersaTxSenderAddress: string;
    sourceChainId: BigNumberish;
    destinationAddress: BytesLike;
    destinationChainId: BigNumberish;
    remainingVersaValue: BigNumberish;
    message: BytesLike;
  };

  export type VersaRevertStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    VersaTxSenderAddress: string;
    sourceChainId: BigNumber;
    destinationAddress: string;
    destinationChainId: BigNumber;
    remainingVersaValue: BigNumber;
    message: string;
  };
}

export interface VersaReceiverInterface extends utils.Interface {
  functions: {
    "onVersaMessage((bytes,uint256,address,uint256,bytes))": FunctionFragment;
    "onVersaRevert((address,uint256,bytes,uint256,uint256,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "onVersaMessage" | "onVersaRevert"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "onVersaMessage",
    values: [VersaInterfaces.VersaMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onVersaRevert",
    values: [VersaInterfaces.VersaRevertStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "onVersaMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onVersaRevert",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VersaReceiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VersaReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    onVersaMessage(
      VersaMessage: VersaInterfaces.VersaMessageStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onVersaRevert(
      VersaRevert: VersaInterfaces.VersaRevertStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  onVersaMessage(
    VersaMessage: VersaInterfaces.VersaMessageStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onVersaRevert(
    VersaRevert: VersaInterfaces.VersaRevertStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    onVersaMessage(
      VersaMessage: VersaInterfaces.VersaMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onVersaRevert(
      VersaRevert: VersaInterfaces.VersaRevertStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    onVersaMessage(
      VersaMessage: VersaInterfaces.VersaMessageStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onVersaRevert(
      VersaRevert: VersaInterfaces.VersaRevertStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    onVersaMessage(
      VersaMessage: VersaInterfaces.VersaMessageStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onVersaRevert(
      VersaRevert: VersaInterfaces.VersaRevertStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

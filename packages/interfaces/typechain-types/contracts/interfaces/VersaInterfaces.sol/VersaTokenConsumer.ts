/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface VersaTokenConsumerInterface extends utils.Interface {
  functions: {
    "getEthFromVersa(address,uint256,uint256)": FunctionFragment;
    "getTokenFromVersa(address,uint256,address,uint256)": FunctionFragment;
    "getVersaFromEth(address,uint256)": FunctionFragment;
    "getVersaFromToken(address,uint256,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getEthFromVersa"
      | "getTokenFromVersa"
      | "getVersaFromEth"
      | "getVersaFromToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEthFromVersa",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenFromVersa",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersaFromEth",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersaFromToken",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEthFromVersa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFromVersa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersaFromEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersaFromToken",
    data: BytesLike
  ): Result;

  events: {
    "EthExchangedForVersa(uint256,uint256)": EventFragment;
    "TokenExchangedForVersa(address,uint256,uint256)": EventFragment;
    "VersaExchangedForEth(uint256,uint256)": EventFragment;
    "VersaExchangedForToken(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthExchangedForVersa"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenExchangedForVersa"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersaExchangedForEth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersaExchangedForToken"): EventFragment;
}

export interface EthExchangedForVersaEventObject {
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type EthExchangedForVersaEvent = TypedEvent<
  [BigNumber, BigNumber],
  EthExchangedForVersaEventObject
>;

export type EthExchangedForVersaEventFilter =
  TypedEventFilter<EthExchangedForVersaEvent>;

export interface TokenExchangedForVersaEventObject {
  token: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type TokenExchangedForVersaEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokenExchangedForVersaEventObject
>;

export type TokenExchangedForVersaEventFilter =
  TypedEventFilter<TokenExchangedForVersaEvent>;

export interface VersaExchangedForEthEventObject {
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type VersaExchangedForEthEvent = TypedEvent<
  [BigNumber, BigNumber],
  VersaExchangedForEthEventObject
>;

export type VersaExchangedForEthEventFilter =
  TypedEventFilter<VersaExchangedForEthEvent>;

export interface VersaExchangedForTokenEventObject {
  token: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type VersaExchangedForTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  VersaExchangedForTokenEventObject
>;

export type VersaExchangedForTokenEventFilter =
  TypedEventFilter<VersaExchangedForTokenEvent>;

export interface VersaTokenConsumer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VersaTokenConsumerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getEthFromVersa(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      VersaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTokenFromVersa(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      outputToken: string,
      VersaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVersaFromEth(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVersaFromToken(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      inputToken: string,
      inputTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getEthFromVersa(
    destinationAddress: string,
    minAmountOut: BigNumberish,
    VersaTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTokenFromVersa(
    destinationAddress: string,
    minAmountOut: BigNumberish,
    outputToken: string,
    VersaTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVersaFromEth(
    destinationAddress: string,
    minAmountOut: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVersaFromToken(
    destinationAddress: string,
    minAmountOut: BigNumberish,
    inputToken: string,
    inputTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getEthFromVersa(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      VersaTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenFromVersa(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      outputToken: string,
      VersaTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersaFromEth(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersaFromToken(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      inputToken: string,
      inputTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "EthExchangedForVersa(uint256,uint256)"(
      amountIn?: null,
      amountOut?: null
    ): EthExchangedForVersaEventFilter;
    EthExchangedForVersa(
      amountIn?: null,
      amountOut?: null
    ): EthExchangedForVersaEventFilter;

    "TokenExchangedForVersa(address,uint256,uint256)"(
      token?: null,
      amountIn?: null,
      amountOut?: null
    ): TokenExchangedForVersaEventFilter;
    TokenExchangedForVersa(
      token?: null,
      amountIn?: null,
      amountOut?: null
    ): TokenExchangedForVersaEventFilter;

    "VersaExchangedForEth(uint256,uint256)"(
      amountIn?: null,
      amountOut?: null
    ): VersaExchangedForEthEventFilter;
    VersaExchangedForEth(
      amountIn?: null,
      amountOut?: null
    ): VersaExchangedForEthEventFilter;

    "VersaExchangedForToken(address,uint256,uint256)"(
      token?: null,
      amountIn?: null,
      amountOut?: null
    ): VersaExchangedForTokenEventFilter;
    VersaExchangedForToken(
      token?: null,
      amountIn?: null,
      amountOut?: null
    ): VersaExchangedForTokenEventFilter;
  };

  estimateGas: {
    getEthFromVersa(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      VersaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTokenFromVersa(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      outputToken: string,
      VersaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVersaFromEth(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVersaFromToken(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      inputToken: string,
      inputTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getEthFromVersa(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      VersaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTokenFromVersa(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      outputToken: string,
      VersaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVersaFromEth(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVersaFromToken(
      destinationAddress: string,
      minAmountOut: BigNumberish,
      inputToken: string,
      inputTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
